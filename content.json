{"meta":{"title":"Hawkingfoo","subtitle":null,"description":null,"author":"Hawkingfoo","url":"https://hawkingfoo.github.io"},"pages":[{"title":"Categories","date":"2016-09-16T13:55:02.088Z","updated":"2016-09-16T13:55:02.088Z","comments":true,"path":"categories/index.html","permalink":"https://hawkingfoo.github.io/categories/index.html","excerpt":"","text":""},{"title":"About","date":"2016-09-17T04:11:41.634Z","updated":"2016-09-17T04:11:41.634Z","comments":false,"path":"about/index.html","permalink":"https://hawkingfoo.github.io/about/index.html","excerpt":"","text":""},{"title":"Tags","date":"2016-09-16T13:55:02.091Z","updated":"2016-09-16T13:55:02.091Z","comments":true,"path":"tags/index.html","permalink":"https://hawkingfoo.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"ElasticSearch 入门(2)","slug":"ElasticSearch-入门-2","date":"2016-09-18T08:11:44.000Z","updated":"2016-09-25T08:27:50.064Z","comments":true,"path":"2016/09/18/ElasticSearch-入门-2/","link":"","permalink":"https://hawkingfoo.github.io/2016/09/18/ElasticSearch-入门-2/","excerpt":"本节主要介绍ES安装、常见的插件安装管理，ES的配置，以及集群的搭建，最后给出一个简单的查询节点和数据节点分离的实例。","text":"本节主要介绍ES安装、常见的插件安装管理，ES的配置，以及集群的搭建，最后给出一个简单的查询节点和数据节点分离的实例。 ES安装ES插件管理ES配置ES集群搭建以及查询、数据节点分离","categories":[{"name":"工具","slug":"工具","permalink":"https://hawkingfoo.github.io/categories/工具/"}],"tags":[{"name":"ElasticSearch","slug":"ElasticSearch","permalink":"https://hawkingfoo.github.io/tags/ElasticSearch/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"https://hawkingfoo.github.io/categories/工具/"}]},{"title":"ElasticSearch 入门(1)","slug":"ElasticSearch-入门-1","date":"2016-09-18T07:42:37.000Z","updated":"2016-09-25T08:27:48.877Z","comments":true,"path":"2016/09/18/ElasticSearch-入门-1/","link":"","permalink":"https://hawkingfoo.github.io/2016/09/18/ElasticSearch-入门-1/","excerpt":"ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。","text":"ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。 ES基本概念 Cluster代表一个集群，集群中有多个节点，其中有一个为主节点，这个主节点是可以通过选举产生的，主从节点是对于集群内部来说的。es的一个概念就是去中心化，字面上理解就是无中心节点，这是对于集群外部来说的，因为从外部来看es集群，在逻辑上是个整体，你与任何一个节点的通信和与整个es集群通信是等价的。 Shards代表索引分片，es可以把一个完整的索引分成多个分片，这样的好处是可以把一个大的索引拆分成多个，分布到不同的节点上。构成分布式搜索。分片的数量只能在索引创建前指定，并且索引创建后不能更改。 Replicas代表索引副本，es可以设置多个索引的副本，副本的作用一是提高系统的容错性，当个某个节点某个分片损坏或丢失时可以从副本中恢复。二是提高es的查询效率，es会自动对搜索请求进行负载均衡。 Recovery代表数据恢复或叫数据重新分布，es在有节点加入或退出时会根据机器的负载对索引分片进行重新分配，挂掉的节点重新启动时也会进行数据恢复。 River代表es的一个数据源，也是其它存储方式（如：数据库）同步数据到es的一个方法。它是以插件方式存在的一个es服务，通过读取river中的数据并把它索引到es中，官方的river有couchDB的，RabbitMQ的，Twitter的，Wikipedia的，river这个功能将会在后面的文件中重点说到。 Gateway代表es索引的持久化存储方式，es默认是先把索引存放到内存中，当内存满了时再持久化到硬盘。当这个es集群关闭再重新启动时就会从gateway中读取索引数据。es支持多种类型的gateway，有本地文件系统（默认），分布式文件系统，Hadoop的HDFS和amazon的s3云存储服务。 discovery.zen代表es的自动发现节点机制，es是一个基于p2p的系统，它先通过广播寻找存在的节点，再通过多播协议来进行节点之间的通信，同时也支持点对点的交互。 Transport代表es内部节点或集群与客户端的交互方式，默认内部是使用tcp协议进行交互，同时它支持http协议（json格式）、thrift、servlet、memcached、zeroMQ等的传输协议（通过插件方式集成）。 与关系型数据库的关系Cluster包含多个node，Indices可理解成关系数据库中的databases，Indices可包含多个Index，Index对应关系数据库中的database，它是用来存储相关文档的。Elasticsearch与关系数据的类比对应关系如下：Relational DB ⇒ Databases ⇒ Tables ⇒ Rows ⇒ ColumnsElasticsearch ⇒ Indices ⇒ Types ⇒ Documents ⇒ Fields MySQL ES database index table type row document column field 这里的document的可以理解为一个JSON序列对象。每个document可包含多个field。","categories":[{"name":"工具","slug":"工具","permalink":"https://hawkingfoo.github.io/categories/工具/"}],"tags":[{"name":"ElasticSearch","slug":"ElasticSearch","permalink":"https://hawkingfoo.github.io/tags/ElasticSearch/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"https://hawkingfoo.github.io/categories/工具/"}]},{"title":"Maven简介及使用","slug":"Maven简介及使用","date":"2016-09-17T13:06:03.000Z","updated":"2016-09-25T07:35:43.298Z","comments":true,"path":"2016/09/17/Maven简介及使用/","link":"","permalink":"https://hawkingfoo.github.io/2016/09/17/Maven简介及使用/","excerpt":"Maven是一个项目管理和构建自动化工具。但是对于我们程序员来说，我们最关心的是它的项目构建功能。Maven使用惯例优于配置的原则。","text":"Maven是一个项目管理和构建自动化工具。但是对于我们程序员来说，我们最关心的是它的项目构建功能。Maven使用惯例优于配置的原则。 Maven结构它要求在没有定制之前，所有的项目都有如下的结构： 目录 目的 ${basedir} 存放 pom.xml和所有的子目录 ${basedir}/src/main/java 项目的 java源代码 ${basedir}/src/main/resources 项目的资源，比如说 property文件 ${basedir}/src/test/java 项目的测试类，比如说 JUnit代码 ${basedir}/src/test/resources 测试使用的资源 一个maven项目在默认情况下会产生JAR文件，另外编译后的classes 会放在${basedir}/target/classes下面，JAR 文件会放在${basedir}/target下面。 在这个目录下面，有一个Project Object Model(POM)文件 pom.xml。这个文件用于描述项目，配置插件和管理依赖关系。 创建Maven项目 在命令行中执行下面的命令来建立我们的 hello world 项目。 $mvn archetype:generate -DgroupId=com.mycompany.helloworld -DartifactId=helloworld -Dpackage=com.mycompany.helloworld -Dversion=1.0-SNAPSHOT 我们选择默认的maven-archetype-quickstart，是编号#106。正是我们需要的 Hello World 代码。所以我们可以构建和运行这个程序了。用下面简单的命令构建： $cd helloworld$mvn package 使用IntelliJ Idea创建Maven项目 常见Maven命令 编译：mvn compile 打包：mvn package 安装：mvn install 复制依赖库：mvn dependency:copy-dependencies -DoutputDirectory=lib 查看依赖树：mvn dependency:tree POM 简介 POM (Project Object Model) 一个项目所有的配置都放置在 POM 文件中：定义项目的类型、名字，管理依赖关系，定制插件的行为等。比如说，你可以配置compiler 插件让它使用 java 1.5 来编译。 下面是一个具体的pom.xml例子。 1234567891011121314151617181920212223242526272829303132333435&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.mycompany.helloworld&lt;/groupId&gt; &lt;artifactId&gt;helloworld&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;helloworld&lt;/name&gt; &lt;url&gt;http://maven.apache.org&lt;/url&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;3.8.1&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.3&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;1.7&lt;/source&gt; &lt;target&gt;1.7&lt;/target&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;/project&gt; 在 POM 中，groupId, artifactId, packaging, version 叫作 maven 坐标，它能唯一的确定一个项目。有了 maven坐标，我们就可以用它来指定我们的项目所依赖的其他项目，插件，或者父项目。一般 maven 坐标写成如下的格式：groupId:artifactId:packaging:version Maven依赖 依赖 12345678&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;3.8.1&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 排除依赖使用&lt;exclusions&gt;标签将包中的部分包排除。 1234567891011&lt;dependency&gt; &lt;groupId&gt;org.elasticsearch&lt;/groupId&gt; &lt;artifactId&gt;elasticsearch&lt;/artifactId&gt; &lt;version&gt;2.3.4&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;artifactId&gt;lucene-core&lt;/artifactId&gt; &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; Maven打包及插件有的时候外卖需要将所有依赖打成一个超级Jar包，则需要借助maven-shade-plugin插件来完成。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt; &lt;version&gt;2.4.1&lt;/version&gt; &lt;configuration&gt; &lt;createDependencyReducedPom&gt;false&lt;/createDependencyReducedPom&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;shade&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;relocations&gt; &lt;relocation&gt; &lt;pattern&gt;com.google.guava&lt;/pattern&gt; &lt;shadedPattern&gt;my.elasticsearch.guava&lt;/shadedPattern&gt; &lt;/relocation&gt; &lt;relocation&gt; &lt;pattern&gt;org.joda&lt;/pattern&gt; &lt;shadedPattern&gt;my.elasticsearch.joda&lt;/shadedPattern&gt; &lt;/relocation&gt; &lt;relocation&gt; &lt;pattern&gt;com.google.common&lt;/pattern&gt; &lt;shadedPattern&gt;my.elasticsearch.common&lt;/shadedPattern&gt; &lt;/relocation&gt; &lt;relocation&gt; &lt;pattern&gt;com.google.thirdparty&lt;/pattern&gt; &lt;shadedPattern&gt;my.elasticsearch.thirdparty&lt;/shadedPattern&gt; &lt;/relocation&gt; &lt;relocation&gt; &lt;pattern&gt;com.fasterxml.jackson&lt;/pattern&gt; &lt;shadedPattern&gt;my.elasticsearch.jackson&lt;/shadedPattern&gt; &lt;/relocation&gt; &lt;/relocations&gt; &lt;transformers&gt; &lt;transformerimplementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\" /&gt; &lt;/transformers&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt;","categories":[{"name":"工具","slug":"工具","permalink":"https://hawkingfoo.github.io/categories/工具/"}],"tags":[{"name":"maven","slug":"maven","permalink":"https://hawkingfoo.github.io/tags/maven/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"https://hawkingfoo.github.io/categories/工具/"}]},{"title":"Hexo test","slug":"Hexo-test","date":"2016-09-17T03:16:46.000Z","updated":"2016-09-17T03:56:29.820Z","comments":true,"path":"2016/09/17/Hexo-test/","link":"","permalink":"https://hawkingfoo.github.io/2016/09/17/Hexo-test/","excerpt":"","text":"","categories":[{"name":"hexo","slug":"hexo","permalink":"https://hawkingfoo.github.io/categories/hexo/"}],"tags":[],"keywords":[{"name":"hexo","slug":"hexo","permalink":"https://hawkingfoo.github.io/categories/hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2016-09-16T02:47:28.380Z","updated":"2016-09-17T13:02:51.469Z","comments":true,"path":"2016/09/16/hello-world/","link":"","permalink":"https://hawkingfoo.github.io/2016/09/16/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]}]}